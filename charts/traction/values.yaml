## @param nameOverride String to override the helm chart name, second part of the prefix
nameOverride: ""
## @param fullnameOverride String to fully override the helm chart name, full prefix. *Must be provided if using a custom release name that does not include the word traction.*
fullnameOverride: ""
ingressSuffix: "digicred.services"
acapy:
  image:
    repository: ghcr.io/honeymodi55/traction-plugins-acapy
    pullPolicy: IfNotPresent
    pullSecrets: []
    tag: "sha-76a1e9c@sha256:399d5133fe1f06dcd11415b14b6ea029a1fe960e6767e527170cb9ed7eb2e9e9"

  serviceAccount:
    create: false
    annotations: {}
    automountServiceAccountToken: true
    name: ""

  replicaCount: 1

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
    stabilizationWindowSeconds: 300

  labelOverride: ""

  ## @section Acapy configuration file
  argfile.yml:
    #auto-accept-invites: true
    #auto-accept-requests: true
    #auto-respond-messages: true
    #auto-ping-connection: true
    #auto-provision: true
    #monitor-ping: true
    #public-invites: true
    #plugin: 'aries_cloudagent.messaging.jsonld'
    #genesis-transactions-list: /home/aries/ledgers.yml
    #outbound-transport: http
    #log-level: info
    #endorser-protocol-role: endorser
    #requests-through-public-did: true
    #auto-endorse-transactions: true
   
    auto-accept-invites: true
    auto-accept-requests: true
    auto-create-revocation-transactions: true
    auto-ping-connection: true
    auto-promote-author-did: true
    auto-provision: true
    auto-request-endorsement: true
    auto-respond-credential-offer: false
    auto-respond-credential-proposal: false
    auto-respond-credential-request: true
    auto-respond-messages: true
    auto-respond-presentation-proposal: true
    auto-respond-presentation-request: false
    auto-store-credential: true
    auto-verify-presentation: true
    auto-write-transactions: true
    emit-new-didcomm-mime-type: true
    emit-new-didcomm-prefix: true
    endorser-alias: endorser
    endorser-protocol-role: author
    genesis-transactions-list: /home/aries/ledgers.yml
    label: '{{ include "acapy.label" .}}'
    log-level: info
    monitor-ping: true
    monitor-revocation-notification: true
    multitenant-admin: true
    multitenant: true
    notify-revocation: true
    preserve-exchange-records: true
    public-invites: true
    read-only-ledger: false
    tails-server-base-url: https://tails-test.vonx.io
    tails-server-upload-url: https://tails-test.vonx.io
    wallet-name: askar-wallet
    wallet-storage-type: postgres_storage
    wallet-type: askar

  ## Acapy multiledger configuration file
  ledgers.yml:
    - id: bcovrin-test
      is_production: true
      is_write: true
      genesis_url: "http://genesis.digicred.services:9000/genesis"
      endorser_did: "QrFY3iSWx9NmDsonnuWRiT"
      endorser_alias: "bcovrin-test-endorser"

  ## @section Wallet Storage configuration
  walletStorageConfig:
    json: ""
    url: ""
    max_connections: 10
    wallet_scheme: DatabasePerWallet
  ## @section Wallet Storage Credentials
  ##  Specifies the storage credentials to use for the wallet.
  ##  This is required if you are for using 'postgres_storage' wallet 'storage type.
  ##  For example, '{"account":"postgres","password":"mysecretpassword","admin_account":"postgres","admin_password":"mysecretpassword"}'.
  ##  This configuration maps to the indy sdk postgres plugin (PostgresCredential).
  ##  NOTE: admin_user must have the CREATEDB role or else initialization will fail.
  ##
  ## @param acapy.walletStorageCredentials.json Raw json with database credentials. Overrides all other values including postgres subchart values. e.g.: '{"account":"postgres","password":"mysecretpassword","admin_account":"postgres","admin_password":"mysecretpassword"}'
  ## @param acapy.walletStorageCredentials.account Database account name.
  ## @param acapy.walletStorageCredentials.password Database password.
  ## @param acapy.walletStorageCredentials.admin_account Database account with CREATEDB role used to create additional databases per wallet.
  ## @param acapy.walletStorageCredentials.admin_password Database password for admin account.
  ## @param acapy.walletStorageCredentials.existingSecret Name of an existing secret containing database user, password, and admin password.
  ## @param acapy.walletStorageCredentials.secretKeys.adminPasswordKey Key in existing secret containing admin account password.
  ## @param acapy.walletStorageCredentials.secretKeys.userPasswordKey Key in existing secret containing account password.
  ##
  walletStorageCredentials:
    json: ""
    account: acapy
    admin_account: postgres
    existingSecret: ""
    secretKeys:
      adminPasswordKey: postgres-password
      userPasswordKey: password
  ## @section ACA-Py Multitenancy Configuration
  ##  Specifies the multitenancy config.
  ##  Possible values: wallet_type, wallet_name, wallet_key, cache_size, 'key_derivation_method.
  ##  "wallet_name" is only used when "wallet_type" is "askar-profile"
  ##
  ## @param acapy.multitenancyConfiguration.json Raw json with config. Overrides all other values including subchart values. e.g.: '{"wallet_type":"single-wallet-askar", "wallet_name":"askar-wallet"}'
  ## @param acapy.multitenancyConfiguration.wallet_type Database account name.
  ##
  multitenancyConfiguration:
    json: ""
    wallet_type: single-wallet-askar
  ## @section Acapy Plugins
  plugins:
    basicmessageStorage: true
    connectionUpdate: true
    multitenantProvider: true
    tractionInnkeeper: true
    rpc: true

  ## @section Acapy Plugin Configuration
  plugin-config.yml:
    multitenant_provider:
      manager:
        class_name: multitenant_provider.v1_0.manager.AskarMultitokenMultitenantManager
        always_check_provided_wallet_key: true
      errors:
        on_unneeded_wallet_key: false
      token_expiry:
        units: months
        amount: 3
    
    traction_innkeeper:
      innkeeper_wallet:
        tenant_id: innkeeper
        wallet_name: traction_innkeeper
        wallet_key: change-me
        print_key: true
        print_token: true
        connect_to_endorser:
          - endorser_alias: bcovrin-test-endorser
            ledger_id: bcovrin-test
        create_public_did:
          - bcovrin-test
      reservation:
        expiry_minutes: 2880
        auto_approve: true
        auto_issuer: true
    basicmessage_storage:
      wallet_enabled: true

  ## @section Acapy tails persistence configuration
  persistence:
    ## @param acapy.persistence.existingClaim Name of an existing PVC to use
    ##
    existingClaim: ""
    ## @param acapy.persistence.mountPath
    ##
    mountPath: /home/aries/.indy_client/tails
    storageClass: ""
    accessModes:
      - ReadWriteMany
    size: 1Gi
  ## @section Acapy common configurations
  resources:
    limits: {}
    requests:
      cpu: 120m
      memory: 200Mi
  podAnnotations: {}
  podSecurityContext:
    {}
  containerSecurityContext:
    {}
  service:
    type: ClusterIP
    adminPort: 8031
    httpPort: 8030
  affinity: {}
  nodeSelector: {}
  tolerations: []

  ## @section Acapy NetworkPolicy parameters
  ##
  networkPolicy:
    enabled: false
    ingress:
      enabled: false
      namespaceSelector:
        {}
        # network.openshift.io/policy-group: ingress
      podSelector: {}

  ## @section Acapy OpenShift Route parameters
  openshift:
    route:
      enabled: false
      path: "/"
      targetPort: http
      timeout: 2m
      tls:
        enabled: true
        insecureEdgeTerminationPolicy: None
        termination: edge
      wildcardPolicy: None
    adminRoute:
      enabled: false
      path: "/"
      targetPort: admin
      timeout: 2m
      tls:
        enabled: true
        insecureEdgeTerminationPolicy: None
        termination: edge
      wildcardPolicy: None

  ## @section Acapy Secrets Configuration
  ##
  ## secret:
  ##   envSecretName: my-env-secret

  secret:
    adminApiKey:
      ## @param acapy.secret.adminApiKey.existingSecret Name of an existing secret to use. Must contain `jwt`, `adminApiKey`, and `webhookapi` keys.
      existingSecret: ""
      ## @param acapy.secret.adminApiKey.generated Generate admin api key
      ##
      generated: false
      ## @param acapy.secret.adminApiKey.value Override admin api key
      ##
      value: "digicred-me"
    walletKey:
      ## @param acapy.secret.walletKey.existingSecret Name of an existing secret to use. Must contain `walletKey` key.
      existingSecret: ""
    pluginInnkeeper:
      ## @param acapy.secret.pluginInnkeeper.existingSecret Name of an existing secret to use. Must contain `tenantid`, and `walletkey` keys.
      existingSecret: ""
      ## @param acapy.secret.pluginInnkeeper.generated Generate plugin innkeeper secret values
      ##
      generated: false
      ## @param acapy.secret.pluginInnkeeper.walletkey Override plugin innkeeper wallet key
      ##
      walletkey: "change-me"
      ## @param acapy.secret.pluginInnkeeper.tenantid Override plugin innkeeper tenant id
      ##
      tenantid: "innkeeper"


## @section Tenant Proxy configuration
##
tenant_proxy:
  image:
    repository: ghcr.io/honeymodi55/traction-tenant-proxy
    pullPolicy: IfNotPresent
    pullSecrets: []
    tag: "sha-76a1e9c@sha256:b7c0e825c0ff59cf24af699beb9c5899d13f49c6eab6acc83c19a1ac2bb56dca"
  serviceAccount:
    create: false
    annotations: {}
    automountServiceAccountToken: true
    name: ""
  replicaCount: 1
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
    stabilizationWindowSeconds: 300

  podAnnotations: {}
  podSecurityContext:
    {}
  containerSecurityContext:
    {}
  service:
    type: ClusterIP
    port: 8032

  openshift:
    route:
      enabled: false
      path: "/"
      targetPort: http
      timeout: 2m
      tls:
        enabled: true
        insecureEdgeTerminationPolicy: None
        termination: edge
      wildcardPolicy: None
  resources:
    limits: {}
    requests:
      cpu: 10m
      memory: 50Mi

  
  networkPolicy:
    enabled: false
    ingress:
      enabled: true
      namespaceSelector:
        {}
      podSelector: {}

  affinity: {}
  nodeSelector: {}
  tolerations: []

## @section Tenant-UI Configuration
##
ui:
  enabled: true
  showOIDCReservationLogin: false
  quickConnectEndorserName: ""
  ## @param ui.requireEmailForReservation Whether the Email field is needed for a tenant reservation
  ## If false will default not.applicable@example.com to API
  requireEmailForReservation: true
  ## @param ui.lokiUrl The endpoint to stream loki logs from for the Tenant UI
  lokiUrl: ""
  image:
    repository: ghcr.io/honeymodi55/traction-tenant-ui
    pullPolicy: IfNotPresent
    pullSecrets: []
    tag: "sha-76a1e9c@sha256:6b0ec919cd51a354e4641c41c1183d1b3355a0c5626c721c56a466bd3b4ce18b"

  existingSecret: ""

  ux:
    appTitle: "DigiCred CrMS Tenant Console"
    appInnkeeperTitle: "DigiCred CrMS Innkeeper Console"
    sidebarTitle: "DigiCred CrMS"
    copyright: ""
    owner: ""
    coverImageCopyright: "Photo by Jason W on Unsplash"

    aboutBusiness:
      title: "DigiCred Holdings"
      linkTitle: "DigiCred Holdings"
      link: "https://github.com/DigiCred-Holdings/traction"
      imageUrl: "/img/digicred/digicred.png"

    infoBanner:
      message: ""
      messageLevel: info
      showMessage: false

  ##  Backend Configuration
  ##
  oidc:
    showInnkeeperAdminLogin: true
    showWritableComponents: true
    active: true
    authority: ""
    client: "innkeeper-frontend"
    label: "IDIR"
    jwksUri: ""
    realm: "Traction"
    roleName: "innkeeper"
    session:
      timeoutSeconds: 600
      countdownSeconds: 30
    reservationForm: >-
      {}
    ## @param ui.oidc.extraQueryParams
    extraQueryParams: "{}"

  ## SMTP Configuration
  smtp:
    server: ""
    port: 25
    secure: false
    user: ""
    senderAddress: ""
    innkeeperInbox: ""

  ## Adding tractionUrl under ui section
  server:
    tractionUrl: "http://proxy-traction.digicred.services"

  serviceAccount:
    create: false
    annotations:
      {}
    automountServiceAccountToken: true
    name: ""
  podAnnotations: {}
  podSecurityContext:
    {}
  containerSecurityContext:
    {}
  service:
    type: ClusterIP
    httpPort: 8080
  networkPolicy:
    enabled: false
    ingress:
      enabled: false
      namespaceSelector: {}
      podSelector: {}
  resources:
    limits: {}
    requests:
      cpu: 10m
      memory: 80Mi
  replicaCount: 1
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}
  openshift:
    route:
      enabled: false
      path: "/"
      targetPort: http
      timeout: 2m
      tls:
        enabled: true
        insecureEdgeTerminationPolicy: None
        termination: edge
      wildcardPolicy: None

## @section Ingress Configuration
ingress:
  enabled: true
  className: "nginx"
  annotations: {}
  tls: []
  hosts:
    - host: "traction.digicred.services"
      paths:
        - path: /
          pathType: ImplementationSpecific
          backend:
            service:
              name: my-release-traction-tenant-ui
              port:
                number: 8080
    - host: "acapy-traction.digicred.services"
      paths:
        - path: /
          pathType: ImplementationSpecific
          backend:
            service:
              name: my-release-traction-acapy
              port:
                number: 8030
    - host: "admin-traction.digicred.services"
      paths:
        - path: /
          pathType: ImplementationSpecific
          backend:
            service:
              name: my-release-traction-acapy
              port:
                number: 8031
    - host: "proxy-traction.digicred.services"
      paths:
        - path: /
          pathType: ImplementationSpecific
          backend:
            service:
              name: my-release-traction-tenant-proxy
              port:
                number: 8032

## @section PostgreSQL parameters
##
postgresql:
  enabled: true
  fullnameOverride: ""
  architecture: standalone
  auth:
    ## @param postgresql.auth.enablePostgresUser Assign a password to the "postgres" admin user. Otherwise, remote access will be blocked for this user. Not recommended for production deployment.
    ##
    enablePostgresUser: true
    existingSecret: '{{ include "global.fullname" . }}'
    secretKeys:
      adminPasswordKey: admin-password
      userPasswordKey: database-password
    database: traction
    ## @param postgresql.auth.username Name for a custom user to create
    ##
    username: acapy

  ## PostgreSQL Primary parameters
  primary:
    persistence:
      enabled: true
      size: 1Gi
    
    containerSecurityContext:
      enabled: false
    podSecurityContext:
      enabled: false
    resources:
      limits: {}
      requests:
        cpu: 100m
        memory: 100Mi
    service:
      ports:
        postgresql: 5432
    extendedConfiguration: |
      max_connections = 500

postgresql-ha:
  enabled: false
